name: run-tests
run-name: Run tests / ${{ github.event.head_commit.message }}

on:
  pull_request:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref || github.run_id }}
  cancel-in-progress: true

jobs:

  test-windows-core:
    runs-on: windows-latest
    steps:
      - name: Disable Windows Defender
        run: Set-MpPreference -DisableRealtimeMonitoring $true
        shell: powershell
      - uses: actions/checkout@v3
      - name: Run task 'build'
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          ./build.cmd build
      - name: Run task 'in-tests-core'
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          ./build.cmd in-tests-core -e
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-windows-core-trx
          path: "**/*.trx"

  test-windows-full:
    runs-on: windows-latest
    steps:
      - name: Disable Windows Defender
        run: Set-MpPreference -DisableRealtimeMonitoring $true
        shell: powershell
      - uses: actions/checkout@v3
      - name: Run task 'build'
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          ./build.cmd build
      - name: Run task 'in-tests-full'
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          ./build.cmd in-tests-full -e
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-windows-full-trx
          path: "**/*.trx"

  test-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Clang
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64
      - name: Set up zlib-static
        run: sudo apt-get install -y libkrb5-dev
      - name: Run task 'build'
        run: ./build.cmd build
      - name: Run task 'unit-tests'
        run: ./build.cmd unit-tests -e
      - name: Run task 'in-tests-core'
        run: ./build.cmd in-tests-core -e
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-linux-trx
          path: "**/*.trx"

  test-macos:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v3
      - name: Run task 'build'
        run: ./build.cmd build
      - name: Run task 'unit-tests'
        run: ./build.cmd unit-tests -e
      - name: Run task 'in-tests-core'
        run: ./build.cmd in-tests-core -e
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-macos-trx
          path: "**/*.trx"
  
  spellcheck-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        name: Setup node
        with:
          node-version: "16"
      - name: Install cSpell
        run: npm install -g cspell
      - name: Copy cSpell config
        run: cp ./build/cSpell.json ./cSpell.json
      - name: Run cSpell
        run: cspell --config ./cSpell.json "docs/**/*.md" --no-progress
