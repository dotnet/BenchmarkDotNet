using BenchmarkDotNet.Engines;
using BenchmarkDotNet.Toolchains.InProcess.Emit.Implementation;
using BenchmarkDotNet.Toolchains.Parameters;

// ReSharper disable once CheckNamespace
namespace BenchmarkDotNet.Autogenerated.ReplaceMe
{
    // Stub for diff for RunMethod
    // Used as a template for EmitRunMethod()
    internal class Runnable_0
    {
        public static void Run(IHost host, ExecuteParameters parameters)
        {
            var instance = new Runnable_0();

            var (job, engineParameters, engineFactory) = RunnableReuse.PrepareForRun(instance, host, parameters);

            if (job == null)
                return;

            using (var engine = engineFactory.CreateReadyToRun(engineParameters))
            {
                var results = engine.Run();

                host.ReportResults(results); // printing costs memory, do this after runs

                instance.__TrickTheJIT__(); // compile the method for disassembler, but without actual run of the benchmark ;)
            }
            engineParameters.InProcessDiagnoserHandler.Handle(BenchmarkSignal.AfterEngine);
        }

        public void __TrickTheJIT__()
        {
            throw new System.NotImplementedException();
        }
    }
}