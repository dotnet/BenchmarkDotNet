<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using BenchmarkDotNet.Attributes;

using System;
using System.Threading.Tasks;

namespace BenchmarkDotNet.IntegrationTests.InProcess.EmitTests
{
    /// <summary>
    /// Generated class to check emitted msil cases
    /// </summary>
    public class RunnableStructCaseBenchmark
    {
<#
    int counter = 1;
    // The primitive types are Boolean, Byte, SByte, Int16, UInt16, Int32, UInt32, Int64, UInt64, IntPtr, UIntPtr, Char, Double, and Single
    EmitStructCaseBenchmark(ref counter, "bool", "false");
    EmitStructCaseBenchmark(ref counter, "byte", "0");
    EmitStructCaseBenchmark(ref counter, "sbyte", "0");
    EmitStructCaseBenchmark(ref counter, "short", "0");
    EmitStructCaseBenchmark(ref counter, "ushort", "0");
    EmitStructCaseBenchmark(ref counter, "int", "0");
    EmitStructCaseBenchmark(ref counter, "uint", "0");
    EmitStructCaseBenchmark(ref counter, "long", "0");
    EmitStructCaseBenchmark(ref counter, "ulong", "0");
    EmitStructCaseBenchmark(ref counter, "IntPtr");
    EmitStructCaseBenchmark(ref counter, "UIntPtr");
    EmitStructCaseBenchmark(ref counter, "char", "' '");
    EmitStructCaseBenchmark(ref counter, "double", "0");
    EmitStructCaseBenchmark(ref counter, "float", "0");
    EmitStructCaseBenchmark(ref counter, "decimal", "0");
    EmitStructCaseBenchmark(ref counter, "int?", "null");
    EmitStructCaseBenchmark(ref counter, "(int, int)");
    EmitStructCaseBenchmark(ref counter, "DateTime");
    EmitStructCaseBenchmark(ref counter, "TimeSpan?", "null");
    EmitStructCaseBenchmark(ref counter, "CustomEnumNonConsumable");
    EmitStructCaseBenchmark(ref counter, "CustomEnumConsumable");
    EmitStructCaseBenchmark(ref counter, "CustomStructNonConsumable");
    EmitStructCaseBenchmark(ref counter, "CustomStructConsumable");
    EmitStructCaseBenchmark(ref counter, "CustomStructConsumable<int>");
    EmitStructCaseBenchmark(ref counter, "CustomStructConsumable<string>");
#>
    }
}<#+

    private void EmitStructCaseBenchmark(ref int counter, string type, string? argValue = null)
    {
#>
        // ---- Begin StructCase(<#=type#>) ----

        private <#=type#> _refResultHolder<#=counter#>;

        [Benchmark]
        public ref <#=type#> RefReturnStructCase<#=counter#>() => ref _refResultHolder<#=counter#>;

<#+
        if (argValue != null)
        {
#>
        [Benchmark, Arguments(<#=argValue#>, "<#=counter#>", 0.<#=counter#>)]
        public <#=type#> StructCase<#=counter#>(<#=type#> x, ref string y, double? z) => default;

<#+
        }
        else
        {
#>
        [Benchmark, Arguments(<#=counter#>, "<#=counter#>", 0.<#=counter#>)]
        public <#=type#> StructCase<#=counter#>(int x, ref string y, double? z) => default;

<#+
        }
        counter++;
    }
#>
