<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using BenchmarkDotNet.Attributes;

using System.Threading.Tasks;

namespace BenchmarkDotNet.IntegrationTests.InProcess.EmitTests
{
    /// <summary>
    /// Generated class to check emitted msil cases
    /// </summary>
    public class RunnableTaskCaseBenchmark
    {
<#
    int counter = 1;
    EmitTaskCaseBenchmark(ref counter, "Task", "Task.CompletedTask");
    EmitTaskCaseBenchmark(ref counter, "Task<int>", "Task.FromResult(123)");
    EmitTaskCaseBenchmark(ref counter, "ValueTask", "new ValueTask()");
    EmitTaskCaseBenchmark(ref counter, "ValueTask<string>", "new ValueTask<string>(\"\")");

    // BDN do not support custom awaitables
    //EmitTaskCaseBenchmark(ref counter, "ConfiguredTaskAwaitable", "Task.CompletedTask.ConfigureAwait(false)");
    //EmitTaskCaseBenchmark(ref counter, "ConfiguredTaskAwaitable<int?>", "Task.FromResult((int?)123).ConfigureAwait(false)");
    //EmitTaskCaseBenchmark(ref counter, "ConfiguredValueTaskAwaitable<string>", "new ValueTask<string>(\"\").ConfigureAwait(false)");

    //EmitTaskCaseBenchmark(ref counter, "CustomAwatiableStruct", "new CustomAwatiableStruct()");
    //EmitTaskCaseBenchmark(ref counter, "CustomAwatiableStruct2", "new CustomAwatiableStruct2()");
    //EmitTaskCaseBenchmark(ref counter, "CustomAwatiableClass", "new CustomAwatiableClass()");
    //EmitTaskCaseBenchmark(ref counter, "CustomAwatiableClass2", "new CustomAwatiableClass2()");
#>
    }
}<#+

    private void EmitTaskCaseBenchmark(ref int counter, string type, string returnCode)
    {
#>
        // ---- Begin TaskCase(<#=type#>) ----

        [Benchmark]
        public <#=type#> TaskCase<#=counter#>() => <#=returnCode#>;

        [Benchmark, Arguments(<#=counter#>, "<#=counter#>", 0.<#=counter#>)]
        public <#=type#> TaskCase<#=counter#>(int x, string y, double? z) => <#=returnCode#>;

<#+
        counter++;
    }
#>
