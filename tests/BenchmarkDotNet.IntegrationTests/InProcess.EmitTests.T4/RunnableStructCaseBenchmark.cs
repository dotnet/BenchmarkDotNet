//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using BenchmarkDotNet.Attributes;

using System;
using System.Threading.Tasks;

namespace BenchmarkDotNet.IntegrationTests.InProcess.EmitTests
{
    /// <summary>
    /// Generated class to check emitted msil cases
    /// </summary>
    public class RunnableStructCaseBenchmark
    {
        // ---- Begin StructCase(bool) ----

        private bool _refResultHolder1;

        [Benchmark]
        public ref readonly bool RefReadonlyReturnStructCase1() => ref _refResultHolder1;

        [Benchmark]
        public ref bool RefReturnStructCase1() => ref _refResultHolder1;

        [Benchmark, Arguments(false, "1", 0.1)]
        public bool StructCase1(bool x, ref string y, double? z) => default;

        // ---- Begin StructCase(byte) ----

        private byte _refResultHolder2;

        [Benchmark]
        public ref readonly byte RefReadonlyReturnStructCase2() => ref _refResultHolder2;

        [Benchmark]
        public ref byte RefReturnStructCase2() => ref _refResultHolder2;

        [Benchmark, Arguments(0, "2", 0.2)]
        public byte StructCase2(byte x, ref string y, double? z) => default;

        // ---- Begin StructCase(sbyte) ----

        private sbyte _refResultHolder3;

        [Benchmark]
        public ref readonly sbyte RefReadonlyReturnStructCase3() => ref _refResultHolder3;

        [Benchmark]
        public ref sbyte RefReturnStructCase3() => ref _refResultHolder3;

        [Benchmark, Arguments(0, "3", 0.3)]
        public sbyte StructCase3(sbyte x, ref string y, double? z) => default;

        // ---- Begin StructCase(short) ----

        private short _refResultHolder4;

        [Benchmark]
        public ref readonly short RefReadonlyReturnStructCase4() => ref _refResultHolder4;

        [Benchmark]
        public ref short RefReturnStructCase4() => ref _refResultHolder4;

        [Benchmark, Arguments(0, "4", 0.4)]
        public short StructCase4(short x, ref string y, double? z) => default;

        // ---- Begin StructCase(ushort) ----

        private ushort _refResultHolder5;

        [Benchmark]
        public ref readonly ushort RefReadonlyReturnStructCase5() => ref _refResultHolder5;

        [Benchmark]
        public ref ushort RefReturnStructCase5() => ref _refResultHolder5;

        [Benchmark, Arguments(0, "5", 0.5)]
        public ushort StructCase5(ushort x, ref string y, double? z) => default;

        // ---- Begin StructCase(int) ----

        private int _refResultHolder6;

        [Benchmark]
        public ref readonly int RefReadonlyReturnStructCase6() => ref _refResultHolder6;

        [Benchmark]
        public ref int RefReturnStructCase6() => ref _refResultHolder6;

        [Benchmark, Arguments(0, "6", 0.6)]
        public int StructCase6(int x, ref string y, double? z) => default;

        // ---- Begin StructCase(uint) ----

        private uint _refResultHolder7;

        [Benchmark]
        public ref readonly uint RefReadonlyReturnStructCase7() => ref _refResultHolder7;

        [Benchmark]
        public ref uint RefReturnStructCase7() => ref _refResultHolder7;

        [Benchmark, Arguments(0, "7", 0.7)]
        public uint StructCase7(uint x, ref string y, double? z) => default;

        // ---- Begin StructCase(long) ----

        private long _refResultHolder8;

        [Benchmark]
        public ref readonly long RefReadonlyReturnStructCase8() => ref _refResultHolder8;

        [Benchmark]
        public ref long RefReturnStructCase8() => ref _refResultHolder8;

        [Benchmark, Arguments(0, "8", 0.8)]
        public long StructCase8(long x, ref string y, double? z) => default;

        // ---- Begin StructCase(ulong) ----

        private ulong _refResultHolder9;

        [Benchmark]
        public ref readonly ulong RefReadonlyReturnStructCase9() => ref _refResultHolder9;

        [Benchmark]
        public ref ulong RefReturnStructCase9() => ref _refResultHolder9;

        [Benchmark, Arguments(0, "9", 0.9)]
        public ulong StructCase9(ulong x, ref string y, double? z) => default;

        // ---- Begin StructCase(IntPtr) ----

        private IntPtr _refResultHolder10;

        [Benchmark]
        public ref readonly IntPtr RefReadonlyReturnStructCase10() => ref _refResultHolder10;

        [Benchmark]
        public ref IntPtr RefReturnStructCase10() => ref _refResultHolder10;

        [Benchmark, Arguments(10, "10", 0.10)]
        public IntPtr StructCase10(int x, ref string y, double? z) => default;

        // ---- Begin StructCase(UIntPtr) ----

        private UIntPtr _refResultHolder11;

        [Benchmark]
        public ref readonly UIntPtr RefReadonlyReturnStructCase11() => ref _refResultHolder11;

        [Benchmark]
        public ref UIntPtr RefReturnStructCase11() => ref _refResultHolder11;

        [Benchmark, Arguments(11, "11", 0.11)]
        public UIntPtr StructCase11(int x, ref string y, double? z) => default;

        // ---- Begin StructCase(char) ----

        private char _refResultHolder12;

        [Benchmark]
        public ref readonly char RefReadonlyReturnStructCase12() => ref _refResultHolder12;

        [Benchmark]
        public ref char RefReturnStructCase12() => ref _refResultHolder12;

        [Benchmark, Arguments(' ', "12", 0.12)]
        public char StructCase12(char x, ref string y, double? z) => default;

        // ---- Begin StructCase(double) ----

        private double _refResultHolder13;

        [Benchmark]
        public ref readonly double RefReadonlyReturnStructCase13() => ref _refResultHolder13;

        [Benchmark]
        public ref double RefReturnStructCase13() => ref _refResultHolder13;

        [Benchmark, Arguments(0, "13", 0.13)]
        public double StructCase13(double x, ref string y, double? z) => default;

        // ---- Begin StructCase(float) ----

        private float _refResultHolder14;

        [Benchmark]
        public ref readonly float RefReadonlyReturnStructCase14() => ref _refResultHolder14;

        [Benchmark]
        public ref float RefReturnStructCase14() => ref _refResultHolder14;

        [Benchmark, Arguments(0, "14", 0.14)]
        public float StructCase14(float x, ref string y, double? z) => default;

        // ---- Begin StructCase(decimal) ----

        private decimal _refResultHolder15;

        [Benchmark]
        public ref readonly decimal RefReadonlyReturnStructCase15() => ref _refResultHolder15;

        [Benchmark]
        public ref decimal RefReturnStructCase15() => ref _refResultHolder15;

        [Benchmark, Arguments(0, "15", 0.15)]
        public decimal StructCase15(decimal x, ref string y, double? z) => default;

        // ---- Begin StructCase(int?) ----

        private int? _refResultHolder16;

        [Benchmark]
        public ref readonly int? RefReadonlyReturnStructCase16() => ref _refResultHolder16;

        [Benchmark]
        public ref int? RefReturnStructCase16() => ref _refResultHolder16;

        [Benchmark, Arguments(null, "16", 0.16)]
        public int? StructCase16(int? x, ref string y, double? z) => default;

        // ---- Begin StructCase((int, int)) ----

        private (int, int) _refResultHolder17;

        [Benchmark]
        public ref readonly (int, int) RefReadonlyReturnStructCase17() => ref _refResultHolder17;

        [Benchmark]
        public ref (int, int) RefReturnStructCase17() => ref _refResultHolder17;

        [Benchmark, Arguments(17, "17", 0.17)]
        public (int, int) StructCase17(int x, ref string y, double? z) => default;

        // ---- Begin StructCase(DateTime) ----

        private DateTime _refResultHolder18;

        [Benchmark]
        public ref readonly DateTime RefReadonlyReturnStructCase18() => ref _refResultHolder18;

        [Benchmark]
        public ref DateTime RefReturnStructCase18() => ref _refResultHolder18;

        [Benchmark, Arguments(18, "18", 0.18)]
        public DateTime StructCase18(int x, ref string y, double? z) => default;

        // ---- Begin StructCase(TimeSpan?) ----

        private TimeSpan? _refResultHolder19;

        [Benchmark]
        public ref readonly TimeSpan? RefReadonlyReturnStructCase19() => ref _refResultHolder19;

        [Benchmark]
        public ref TimeSpan? RefReturnStructCase19() => ref _refResultHolder19;

        [Benchmark, Arguments(null, "19", 0.19)]
        public TimeSpan? StructCase19(TimeSpan? x, ref string y, double? z) => default;

        // ---- Begin StructCase(CustomEnumNonConsumable) ----

        private CustomEnumNonConsumable _refResultHolder20;

        [Benchmark]
        public ref readonly CustomEnumNonConsumable RefReadonlyReturnStructCase20() => ref _refResultHolder20;

        [Benchmark]
        public ref CustomEnumNonConsumable RefReturnStructCase20() => ref _refResultHolder20;

        [Benchmark, Arguments(20, "20", 0.20)]
        public CustomEnumNonConsumable StructCase20(int x, ref string y, double? z) => default;

        // ---- Begin StructCase(CustomEnumConsumable) ----

        private CustomEnumConsumable _refResultHolder21;

        [Benchmark]
        public ref readonly CustomEnumConsumable RefReadonlyReturnStructCase21() => ref _refResultHolder21;

        [Benchmark]
        public ref CustomEnumConsumable RefReturnStructCase21() => ref _refResultHolder21;

        [Benchmark, Arguments(21, "21", 0.21)]
        public CustomEnumConsumable StructCase21(int x, ref string y, double? z) => default;

        // ---- Begin StructCase(CustomStructNonConsumable) ----

        private CustomStructNonConsumable _refResultHolder22;

        [Benchmark]
        public ref readonly CustomStructNonConsumable RefReadonlyReturnStructCase22() => ref _refResultHolder22;

        [Benchmark]
        public ref CustomStructNonConsumable RefReturnStructCase22() => ref _refResultHolder22;

        [Benchmark, Arguments(22, "22", 0.22)]
        public CustomStructNonConsumable StructCase22(int x, ref string y, double? z) => default;

        // ---- Begin StructCase(CustomStructConsumable) ----

        private CustomStructConsumable _refResultHolder23;

        [Benchmark]
        public ref readonly CustomStructConsumable RefReadonlyReturnStructCase23() => ref _refResultHolder23;

        [Benchmark]
        public ref CustomStructConsumable RefReturnStructCase23() => ref _refResultHolder23;

        [Benchmark, Arguments(23, "23", 0.23)]
        public CustomStructConsumable StructCase23(int x, ref string y, double? z) => default;

        // ---- Begin StructCase(CustomStructConsumable<int>) ----

        private CustomStructConsumable<int> _refResultHolder24;

        [Benchmark]
        public ref readonly CustomStructConsumable<int> RefReadonlyReturnStructCase24() => ref _refResultHolder24;

        [Benchmark]
        public ref CustomStructConsumable<int> RefReturnStructCase24() => ref _refResultHolder24;

        [Benchmark, Arguments(24, "24", 0.24)]
        public CustomStructConsumable<int> StructCase24(int x, ref string y, double? z) => default;

        // ---- Begin StructCase(CustomStructConsumable<string>) ----

        private CustomStructConsumable<string> _refResultHolder25;

        [Benchmark]
        public ref readonly CustomStructConsumable<string> RefReadonlyReturnStructCase25() => ref _refResultHolder25;

        [Benchmark]
        public ref CustomStructConsumable<string> RefReturnStructCase25() => ref _refResultHolder25;

        [Benchmark, Arguments(25, "25", 0.25)]
        public CustomStructConsumable<string> StructCase25(int x, ref string y, double? z) => default;

    }
}