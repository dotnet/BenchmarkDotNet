//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BenchmarkDotNet.Analyzers {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class BenchmarkDotNetAnalyzerResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal BenchmarkDotNetAnalyzerResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BenchmarkDotNet.Analyzers.BenchmarkDotNetAnalyzerResources", typeof(BenchmarkDotNetAnalyzerResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This method declares one or more parameters but is not annotated with any [Arguments] attributes. To ensure correct argument binding, methods with parameters must explicitly be annotated with one or more [Arguments] attributes.
        ///Either add the [Arguments] attribute(s) or remove the parameters..
        /// </summary>
        internal static string Attributes_ArgumentsAttribute_MethodWithoutAttributeMustHaveNoParameters_Description {
            get {
                return ResourceManager.GetString("Attributes_ArgumentsAttribute_MethodWithoutAttributeMustHaveNoParameters_Descript" +
                        "ion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Benchmark method without [Arguments] attribute(s) cannot declare parameters.
        /// </summary>
        internal static string Attributes_ArgumentsAttribute_MethodWithoutAttributeMustHaveNoParameters_MessageFormat {
            get {
                return ResourceManager.GetString("Attributes_ArgumentsAttribute_MethodWithoutAttributeMustHaveNoParameters_MessageF" +
                        "ormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Benchmark methods without [Arguments] attribute(s) cannot declare parameters.
        /// </summary>
        internal static string Attributes_ArgumentsAttribute_MethodWithoutAttributeMustHaveNoParameters_Title {
            get {
                return ResourceManager.GetString("Attributes_ArgumentsAttribute_MethodWithoutAttributeMustHaveNoParameters_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of values passed to an [Arguments] attribute must match the number of parameters declared in the targeted benchmark method.
        /// </summary>
        internal static string Attributes_ArgumentsAttribute_MustHaveMatchingValueCount_Description {
            get {
                return ResourceManager.GetString("Attributes_ArgumentsAttribute_MustHaveMatchingValueCount_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected {0} value{1} as declared by the benchmark method &apos;{2}&apos;, but found {3}. Update the attribute usage or method to match..
        /// </summary>
        internal static string Attributes_ArgumentsAttribute_MustHaveMatchingValueCount_MessageFormat {
            get {
                return ResourceManager.GetString("Attributes_ArgumentsAttribute_MustHaveMatchingValueCount_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of values passed to an [Arguments] attribute must match the number of parameters declared in the targeted benchmark method.
        /// </summary>
        internal static string Attributes_ArgumentsAttribute_MustHaveMatchingValueCount_Title {
            get {
                return ResourceManager.GetString("Attributes_ArgumentsAttribute_MustHaveMatchingValueCount_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The values passed to an [Arguments] attribute must match the parameters declared in the targeted benchmark method in both type (or be implicitly convertible to) and order.
        /// </summary>
        internal static string Attributes_ArgumentsAttribute_MustHaveMatchingValueType_Description {
            get {
                return ResourceManager.GetString("Attributes_ArgumentsAttribute_MustHaveMatchingValueType_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected type for value &apos;{0}&apos;. Expected &apos;{1}&apos; but found &apos;{2}&apos;..
        /// </summary>
        internal static string Attributes_ArgumentsAttribute_MustHaveMatchingValueType_MessageFormat {
            get {
                return ResourceManager.GetString("Attributes_ArgumentsAttribute_MustHaveMatchingValueType_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Values passed to an [Arguments] attribute must match exactly the parameters declared in the targeted benchmark method in both type (or be implicitly convertible to) and order.
        /// </summary>
        internal static string Attributes_ArgumentsAttribute_MustHaveMatchingValueType_Title {
            get {
                return ResourceManager.GetString("Attributes_ArgumentsAttribute_MustHaveMatchingValueType_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The [Arguments] attribute can only be used on methods annotated with the [Benchmark] attribute.
        /// </summary>
        internal static string Attributes_ArgumentsAttribute_RequiresBenchmarkAttribute_MessageFormat {
            get {
                return ResourceManager.GetString("Attributes_ArgumentsAttribute_RequiresBenchmarkAttribute_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Arguments] attribute can only be used on methods annotated with the [Benchmark] attribute.
        /// </summary>
        internal static string Attributes_ArgumentsAttribute_RequiresBenchmarkAttribute_Title {
            get {
                return ResourceManager.GetString("Attributes_ArgumentsAttribute_RequiresBenchmarkAttribute_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A field annotated with a parameter attribute must be public.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_FieldMustBePublic_Description {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_FieldMustBePublic_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field &apos;{0}&apos; annotated with [{1}] must be public.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_FieldMustBePublic_MessageFormat {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_FieldMustBePublic_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields annotated with a parameter attribute must be public.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_FieldMustBePublic_Title {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_FieldMustBePublic_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter attributes are mutually exclusive; only one of the attributes [Params], [ParamsSource] or [ParamsAllValues] can be applied to a field at any one time.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_MutuallyExclusiveOnField_Description {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_MutuallyExclusiveOnField_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate parameter attribute on field &apos;{0}&apos;.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_MutuallyExclusiveOnField_MessageFormat {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_MutuallyExclusiveOnField_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one parameter attribute can be applied to a field.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_MutuallyExclusiveOnField_Title {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_MutuallyExclusiveOnField_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter attributes are mutually exclusive; only one of the attributes [Params], [ParamsSource] or [ParamsAllValues] can be applied to a property at any one time.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_MutuallyExclusiveOnProperty_Description {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_MutuallyExclusiveOnProperty_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate parameter attribute on property &apos;{0}&apos;.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_MutuallyExclusiveOnProperty_MessageFormat {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_MutuallyExclusiveOnProperty_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one parameter attribute can be applied to a property.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_MutuallyExclusiveOnProperty_Title {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_MutuallyExclusiveOnProperty_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter attribute [{0}] is not valid on constants. It is only valid on non-constant field declarations..
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_NotValidOnConstantField_MessageFormat {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_NotValidOnConstantField_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter attributes are not valid on constant field declarations.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_NotValidOnConstantField_Title {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_NotValidOnConstantField_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter attributes are not valid on fields with a readonly modifier.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_NotValidOnReadonlyField_Description {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_NotValidOnReadonlyField_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modifier &apos;readonly&apos; is not valid on field &apos;{0}&apos; annotated with parameter attribute [{1}].
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_NotValidOnReadonlyField_MessageFormat {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_NotValidOnReadonlyField_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields annotated with a parameter attribute cannot be read-only.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_NotValidOnReadonlyField_Title {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_NotValidOnReadonlyField_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A property annotated with a parameter attribute must have a public, assignable setter i.e. { set; }.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_PropertyCannotBeInitOnly_Description {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_PropertyCannotBeInitOnly_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property &apos;{0}&apos; annotated with [{1}] cannot be init-only.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_PropertyCannotBeInitOnly_MessageFormat {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_PropertyCannotBeInitOnly_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Properties annotated with a parameter attribute cannot have an init-only setter.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_PropertyCannotBeInitOnly_Title {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_PropertyCannotBeInitOnly_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A property annotated with a parameter attribute must be public.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_PropertyMustBePublic_Description {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_PropertyMustBePublic_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property &apos;{0}&apos; annotated with [{1}] must be public.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_PropertyMustBePublic_MessageFormat {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_PropertyMustBePublic_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Properties annotated with a parameter attribute must be public.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_PropertyMustBePublic_Title {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_PropertyMustBePublic_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A property annotated with a parameter attribute must have a public setter; make sure that the access modifier of the setter is empty and that the property is not an auto-property or an expression-bodied property..
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_PropertyMustHavePublicSetter_Description {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_PropertyMustHavePublicSetter_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property &apos;{0}&apos; annotated with [{1}] must have a public setter.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_PropertyMustHavePublicSetter_MessageFormat {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_PropertyMustHavePublicSetter_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Properties annotated with a parameter attribute must have a public setter.
        /// </summary>
        internal static string Attributes_GeneralParameterAttributes_PropertyMustHavePublicSetter_Title {
            get {
                return ResourceManager.GetString("Attributes_GeneralParameterAttributes_PropertyMustHavePublicSetter_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The [ParamsAllValues] attribute cannot be applied to a field or property of an enum type marked with the [Flags] attribute. Use this attribute only with non-flags enum types, as [Flags] enums support bitwise combinations that cannot be exhaustively enumerated..
        /// </summary>
        internal static string Attributes_ParamsAllValuesAttribute_NotAllowedOnFlagsEnumPropertyOrFieldType_Description {
            get {
                return ResourceManager.GetString("Attributes_ParamsAllValuesAttribute_NotAllowedOnFlagsEnumPropertyOrFieldType_Desc" +
                        "ription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field or property enum type &apos;{0}&apos; is marked with [Flags] and cannot be used with this attribute.
        /// </summary>
        internal static string Attributes_ParamsAllValuesAttribute_NotAllowedOnFlagsEnumPropertyOrFieldType_MessageFormat {
            get {
                return ResourceManager.GetString("Attributes_ParamsAllValuesAttribute_NotAllowedOnFlagsEnumPropertyOrFieldType_Mess" +
                        "ageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The [ParamsAllValues] attribute cannot be applied to fields or properties of enum types marked with [Flags].
        /// </summary>
        internal static string Attributes_ParamsAllValuesAttribute_NotAllowedOnFlagsEnumPropertyOrFieldType_Title {
            get {
                return ResourceManager.GetString("Attributes_ParamsAllValuesAttribute_NotAllowedOnFlagsEnumPropertyOrFieldType_Titl" +
                        "e", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The [ParamsAllValues] attribute can only be applied to a field or property of enum or bool type (or nullable of these types).
        /// </summary>
        internal static string Attributes_ParamsAllValuesAttribute_PropertyOrFieldTypeMustBeEnumOrBool_MessageFormat {
            get {
                return ResourceManager.GetString("Attributes_ParamsAllValuesAttribute_PropertyOrFieldTypeMustBeEnumOrBool_MessageFo" +
                        "rmat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The [ParamsAllValues] attribute is only valid on fields or properties of enum or bool type and nullable type for another allowed type.
        /// </summary>
        internal static string Attributes_ParamsAllValuesAttribute_PropertyOrFieldTypeMustBeEnumOrBool_Title {
            get {
                return ResourceManager.GetString("Attributes_ParamsAllValuesAttribute_PropertyOrFieldTypeMustBeEnumOrBool_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The [Params] attribute requires at least one value. No values were provided, or an empty array was specified..
        /// </summary>
        internal static string Attributes_ParamsAttribute_MustHaveValues_MessageFormat {
            get {
                return ResourceManager.GetString("Attributes_ParamsAttribute_MustHaveValues_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The [Params] attribute must include at least one value.
        /// </summary>
        internal static string Attributes_ParamsAttribute_MustHaveValues_Title {
            get {
                return ResourceManager.GetString("Attributes_ParamsAttribute_MustHaveValues_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of each value provided to the [Params] attribute must match the type of (or be implicitly convertible to) the field or property it is applied to.
        /// </summary>
        internal static string Attributes_ParamsAttribute_UnexpectedValueType_Description {
            get {
                return ResourceManager.GetString("Attributes_ParamsAttribute_UnexpectedValueType_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected type for parameter value &apos;{0}&apos;. Expected &apos;{1}&apos; but found &apos;{2}&apos;..
        /// </summary>
        internal static string Attributes_ParamsAttribute_UnexpectedValueType_MessageFormat {
            get {
                return ResourceManager.GetString("Attributes_ParamsAttribute_UnexpectedValueType_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type of all value(s) passed to the [Params] attribute must match the type of (or be implicitly convertible to) the annotated field or property.
        /// </summary>
        internal static string Attributes_ParamsAttribute_UnexpectedValueType_Title {
            get {
                return ResourceManager.GetString("Attributes_ParamsAttribute_UnexpectedValueType_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Providing a single value to the [Params] attribute is unnecessary. This attribute is only useful when provided two or more values..
        /// </summary>
        internal static string Attributes_ParamsAttribute_UnnecessarySingleValuePassedToAttribute_MessageFormat {
            get {
                return ResourceManager.GetString("Attributes_ParamsAttribute_UnnecessarySingleValuePassedToAttribute_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unnecessary single value passed to [Params] attribute.
        /// </summary>
        internal static string Attributes_ParamsAttribute_UnnecessarySingleValuePassedToAttribute_Title {
            get {
                return ResourceManager.GetString("Attributes_ParamsAttribute_UnnecessarySingleValuePassedToAttribute_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The referenced benchmark class (or any of its inherited classes) must have at least one method annotated with the [Benchmark] attribute.
        /// </summary>
        internal static string BenchmarkRunner_Run_TypeArgumentClassMissingBenchmarkMethods_Description {
            get {
                return ResourceManager.GetString("BenchmarkRunner_Run_TypeArgumentClassMissingBenchmarkMethods_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Intended benchmark class &apos;{0}&apos; (or any of its ancestors) has no method(s) annotated with the [Benchmark] attribute.
        /// </summary>
        internal static string BenchmarkRunner_Run_TypeArgumentClassMissingBenchmarkMethods_MessageFormat {
            get {
                return ResourceManager.GetString("BenchmarkRunner_Run_TypeArgumentClassMissingBenchmarkMethods_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Benchmark class (or any of its ancestors) has no annotated method(s).
        /// </summary>
        internal static string BenchmarkRunner_Run_TypeArgumentClassMissingBenchmarkMethods_Title {
            get {
                return ResourceManager.GetString("BenchmarkRunner_Run_TypeArgumentClassMissingBenchmarkMethods_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A benchmark class referenced in the BenchmarkRunner.Run method must be non-abstract.
        /// </summary>
        internal static string BenchmarkRunner_Run_TypeArgumentClassMustBeNonAbstract_Description {
            get {
                return ResourceManager.GetString("BenchmarkRunner_Run_TypeArgumentClassMustBeNonAbstract_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Referenced benchmark class &apos;{0}&apos; cannot be abstract.
        /// </summary>
        internal static string BenchmarkRunner_Run_TypeArgumentClassMustBeNonAbstract_MessageFormat {
            get {
                return ResourceManager.GetString("BenchmarkRunner_Run_TypeArgumentClassMustBeNonAbstract_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Benchmark classes must be non-abstract.
        /// </summary>
        internal static string BenchmarkRunner_Run_TypeArgumentClassMustBeNonAbstract_Title {
            get {
                return ResourceManager.GetString("BenchmarkRunner_Run_TypeArgumentClassMustBeNonAbstract_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Referenced benchmark class &apos;{0}&apos; must be public.
        /// </summary>
        internal static string BenchmarkRunner_Run_TypeArgumentClassMustBePublic_MessageFormat {
            get {
                return ResourceManager.GetString("BenchmarkRunner_Run_TypeArgumentClassMustBePublic_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Benchmark classes must be public.
        /// </summary>
        internal static string BenchmarkRunner_Run_TypeArgumentClassMustBePublic_Title {
            get {
                return ResourceManager.GetString("BenchmarkRunner_Run_TypeArgumentClassMustBePublic_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A benchmark class referenced in the BenchmarkRunner.Run method must be unsealed.
        /// </summary>
        internal static string BenchmarkRunner_Run_TypeArgumentClassMustBeUnsealed_Description {
            get {
                return ResourceManager.GetString("BenchmarkRunner_Run_TypeArgumentClassMustBeUnsealed_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Referenced benchmark class &apos;{0}&apos; is sealed.
        /// </summary>
        internal static string BenchmarkRunner_Run_TypeArgumentClassMustBeUnsealed_MessageFormat {
            get {
                return ResourceManager.GetString("BenchmarkRunner_Run_TypeArgumentClassMustBeUnsealed_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Benchmark classes must be unsealed.
        /// </summary>
        internal static string BenchmarkRunner_Run_TypeArgumentClassMustBeUnsealed_Title {
            get {
                return ResourceManager.GetString("BenchmarkRunner_Run_TypeArgumentClassMustBeUnsealed_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A benchmark class must be an instance class.
        /// </summary>
        internal static string General_BenchmarkClass_ClassMustBeNonStatic_Description {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_ClassMustBeNonStatic_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Benchmark class &apos;{0}&apos; cannot be static.
        /// </summary>
        internal static string General_BenchmarkClass_ClassMustBeNonStatic_MessageFormat {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_ClassMustBeNonStatic_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Benchmark classes must be non-static.
        /// </summary>
        internal static string General_BenchmarkClass_ClassMustBeNonStatic_Title {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_ClassMustBeNonStatic_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A benchmark class annotated with a [GenericTypeArguments] attribute must be generic, having between one to three type parameters.
        /// </summary>
        internal static string General_BenchmarkClass_ClassWithGenericTypeArgumentsAttributeMustBeGeneric_Description {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_ClassWithGenericTypeArgumentsAttributeMustBeGeneric_Descri" +
                        "ption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Benchmark class &apos;{0}&apos; must be generic.
        /// </summary>
        internal static string General_BenchmarkClass_ClassWithGenericTypeArgumentsAttributeMustBeGeneric_MessageFormat {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_ClassWithGenericTypeArgumentsAttributeMustBeGeneric_Messag" +
                        "eFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Benchmark classes annotated with a [GenericTypeArguments] attribute must be generic.
        /// </summary>
        internal static string General_BenchmarkClass_ClassWithGenericTypeArgumentsAttributeMustBeGeneric_Title {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_ClassWithGenericTypeArgumentsAttributeMustBeGeneric_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A benchmark class annotated with a [GenericTypeArguments] attribute must be non-abstract.
        /// </summary>
        internal static string General_BenchmarkClass_ClassWithGenericTypeArgumentsAttributeMustBeNonAbstract_Description {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_ClassWithGenericTypeArgumentsAttributeMustBeNonAbstract_De" +
                        "scription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Benchmark class &apos;{0}&apos; cannot be abstract.
        /// </summary>
        internal static string General_BenchmarkClass_ClassWithGenericTypeArgumentsAttributeMustBeNonAbstract_MessageFormat {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_ClassWithGenericTypeArgumentsAttributeMustBeNonAbstract_Me" +
                        "ssageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Benchmark classes annotated with the [GenericTypeArguments] attribute must be non-abstract.
        /// </summary>
        internal static string General_BenchmarkClass_ClassWithGenericTypeArgumentsAttributeMustBeNonAbstract_Title {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_ClassWithGenericTypeArgumentsAttributeMustBeNonAbstract_Ti" +
                        "tle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Benchmark class &apos;{0}&apos; cannot be generic unless declared as abstract or annotated with a [GenericTypeArguments] attribute.
        /// </summary>
        internal static string General_BenchmarkClass_GenericClassMustBeAbstractOrAnnotatedWithAGenericTypeArgumentsAttribute_MessageFormat {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_GenericClassMustBeAbstractOrAnnotatedWithAGenericTypeArgum" +
                        "entsAttribute_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Benchmark classes can only be generic if they&apos;re either abstract or annotated with a [GenericTypeArguments] attribute.
        /// </summary>
        internal static string General_BenchmarkClass_GenericClassMustBeAbstractOrAnnotatedWithAGenericTypeArgumentsAttribute_Title {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_GenericClassMustBeAbstractOrAnnotatedWithAGenericTypeArgum" +
                        "entsAttribute_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of type arguments passed to a [GenericTypeArguments] attribute must match the number of type parameters on the targeted benchmark class.
        /// </summary>
        internal static string General_BenchmarkClass_GenericTypeArgumentsAttributeMustHaveMatchingTypeParameterCount_Description {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_GenericTypeArgumentsAttributeMustHaveMatchingTypeParameter" +
                        "Count_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected {0} type argument{1} as declared on the benchmark class &apos;{2}&apos;, but found {3}. Update the attribute usage or the type parameter list of the class declaration to match..
        /// </summary>
        internal static string General_BenchmarkClass_GenericTypeArgumentsAttributeMustHaveMatchingTypeParameterCount_MessageFormat {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_GenericTypeArgumentsAttributeMustHaveMatchingTypeParameter" +
                        "Count_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of type arguments passed to a [GenericTypeArguments] attribute must match the number of type parameters on the targeted benchmark class.
        /// </summary>
        internal static string General_BenchmarkClass_GenericTypeArgumentsAttributeMustHaveMatchingTypeParameterCount_Title {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_GenericTypeArgumentsAttributeMustHaveMatchingTypeParameter" +
                        "Count_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method annotated with the [Benchmark] attribute must be non-generic.
        /// </summary>
        internal static string General_BenchmarkClass_MethodMustBeNonGeneric_Description {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_MethodMustBeNonGeneric_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The benchmark method &apos;{0}&apos; must be non-generic.
        /// </summary>
        internal static string General_BenchmarkClass_MethodMustBeNonGeneric_MessageFormat {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_MethodMustBeNonGeneric_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Benchmark methods must be non-generic.
        /// </summary>
        internal static string General_BenchmarkClass_MethodMustBeNonGeneric_Title {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_MethodMustBeNonGeneric_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method annotated with the [Benchmark] attribute must be public.
        /// </summary>
        internal static string General_BenchmarkClass_MethodMustBePublic_Description {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_MethodMustBePublic_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The benchmark method &apos;{0}&apos; must be public.
        /// </summary>
        internal static string General_BenchmarkClass_MethodMustBePublic_MessageFormat {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_MethodMustBePublic_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Benchmark methods must be public.
        /// </summary>
        internal static string General_BenchmarkClass_MethodMustBePublic_Title {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_MethodMustBePublic_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one benchmark method can be marked as baseline.
        /// </summary>
        internal static string General_BenchmarkClass_OnlyOneMethodCanBeBaseline_MessageFormat {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_OnlyOneMethodCanBeBaseline_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one benchmark method can be baseline.
        /// </summary>
        internal static string General_BenchmarkClass_OnlyOneMethodCanBeBaseline_Title {
            get {
                return ResourceManager.GetString("General_BenchmarkClass_OnlyOneMethodCanBeBaseline_Title", resourceCulture);
            }
        }
    }
}
